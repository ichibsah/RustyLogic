//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace RustyLogic.RedDotNet.Service.Page {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PageServiceSoap", Namespace="http://reddot.de/cms/webservices/navigation/1_1")]
    public partial class PageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreatePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenamePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PageService() {
            this.Url = global::RustyLogic.RedDotNet.Properties.Settings.Default.RedDotNet_Service_Page_PageService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreatePageCompletedEventHandler CreatePageCompleted;
        
        /// <remarks/>
        public event RenamePageCompletedEventHandler RenamePageCompleted;
        
        /// <remarks/>
        public event DeletePageCompletedEventHandler DeletePageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/CreatePage", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid CreatePage(string headline, System.Guid templateId, System.Guid linkId, string sessionKey, System.Guid loginId) {
            object[] results = this.Invoke("CreatePage", new object[] {
                        headline,
                        templateId,
                        linkId,
                        sessionKey,
                        loginId});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePageAsync(string headline, System.Guid templateId, System.Guid linkId, string sessionKey, System.Guid loginId) {
            this.CreatePageAsync(headline, templateId, linkId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void CreatePageAsync(string headline, System.Guid templateId, System.Guid linkId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.CreatePageOperationCompleted == null)) {
                this.CreatePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePageOperationCompleted);
            }
            this.InvokeAsync("CreatePage", new object[] {
                        headline,
                        templateId,
                        linkId,
                        sessionKey,
                        loginId}, this.CreatePageOperationCompleted, userState);
        }
        
        private void OnCreatePageOperationCompleted(object arg) {
            if ((this.CreatePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePageCompleted(this, new CreatePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/RenamePage", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenamePage(System.Guid pageId, string newHeadline, string sessionKey, System.Guid loginId) {
            this.Invoke("RenamePage", new object[] {
                        pageId,
                        newHeadline,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void RenamePageAsync(System.Guid pageId, string newHeadline, string sessionKey, System.Guid loginId) {
            this.RenamePageAsync(pageId, newHeadline, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void RenamePageAsync(System.Guid pageId, string newHeadline, string sessionKey, System.Guid loginId, object userState) {
            if ((this.RenamePageOperationCompleted == null)) {
                this.RenamePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenamePageOperationCompleted);
            }
            this.InvokeAsync("RenamePage", new object[] {
                        pageId,
                        newHeadline,
                        sessionKey,
                        loginId}, this.RenamePageOperationCompleted, userState);
        }
        
        private void OnRenamePageOperationCompleted(object arg) {
            if ((this.RenamePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenamePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/DeletePage", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePage(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.Invoke("DeletePage", new object[] {
                        pageId,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void DeletePageAsync(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.DeletePageAsync(pageId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void DeletePageAsync(System.Guid pageId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.DeletePageOperationCompleted == null)) {
                this.DeletePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePageOperationCompleted);
            }
            this.InvokeAsync("DeletePage", new object[] {
                        pageId,
                        sessionKey,
                        loginId}, this.DeletePageOperationCompleted, userState);
        }
        
        private void OnDeletePageOperationCompleted(object arg) {
            if ((this.DeletePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreatePageCompletedEventHandler(object sender, CreatePageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RenamePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeletePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591