//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace RustyLogic.RedDotNet.Service.Navigation {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NavigationServiceSoap", Namespace="http://reddot.de/cms/webservices/navigation/1_1")]
    public partial class NavigationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddIndexToPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIndexToPageRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveIndexFromPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveIndexFromPageRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIndexParentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIndexPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndexPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearCacheOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NavigationService() {
            this.Url = global::RustyLogic.RedDotNet.Properties.Settings.Default.RedDotNet_Service_Navigation_NavigationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddIndexToPageCompletedEventHandler AddIndexToPageCompleted;
        
        /// <remarks/>
        public event AddIndexToPageRangeCompletedEventHandler AddIndexToPageRangeCompleted;
        
        /// <remarks/>
        public event RemoveIndexFromPageCompletedEventHandler RemoveIndexFromPageCompleted;
        
        /// <remarks/>
        public event RemoveIndexFromPageRangeCompletedEventHandler RemoveIndexFromPageRangeCompleted;
        
        /// <remarks/>
        public event SetIndexParentCompletedEventHandler SetIndexParentCompleted;
        
        /// <remarks/>
        public event SetIndexPositionCompletedEventHandler SetIndexPositionCompleted;
        
        /// <remarks/>
        public event GetIndexPositionCompletedEventHandler GetIndexPositionCompleted;
        
        /// <remarks/>
        public event ClearCacheCompletedEventHandler ClearCacheCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/AddIndexToPage", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddIndexToPage(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.Invoke("AddIndexToPage", new object[] {
                        pageId,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void AddIndexToPageAsync(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.AddIndexToPageAsync(pageId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void AddIndexToPageAsync(System.Guid pageId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.AddIndexToPageOperationCompleted == null)) {
                this.AddIndexToPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIndexToPageOperationCompleted);
            }
            this.InvokeAsync("AddIndexToPage", new object[] {
                        pageId,
                        sessionKey,
                        loginId}, this.AddIndexToPageOperationCompleted, userState);
        }
        
        private void OnAddIndexToPageOperationCompleted(object arg) {
            if ((this.AddIndexToPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIndexToPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/AddIndexToPageRange", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddIndexToPageRange(System.Guid[] pageIds, string sessionKey, System.Guid loginId) {
            this.Invoke("AddIndexToPageRange", new object[] {
                        pageIds,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void AddIndexToPageRangeAsync(System.Guid[] pageIds, string sessionKey, System.Guid loginId) {
            this.AddIndexToPageRangeAsync(pageIds, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void AddIndexToPageRangeAsync(System.Guid[] pageIds, string sessionKey, System.Guid loginId, object userState) {
            if ((this.AddIndexToPageRangeOperationCompleted == null)) {
                this.AddIndexToPageRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIndexToPageRangeOperationCompleted);
            }
            this.InvokeAsync("AddIndexToPageRange", new object[] {
                        pageIds,
                        sessionKey,
                        loginId}, this.AddIndexToPageRangeOperationCompleted, userState);
        }
        
        private void OnAddIndexToPageRangeOperationCompleted(object arg) {
            if ((this.AddIndexToPageRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIndexToPageRangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/RemoveIndexFromPage", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveIndexFromPage(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.Invoke("RemoveIndexFromPage", new object[] {
                        pageId,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void RemoveIndexFromPageAsync(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.RemoveIndexFromPageAsync(pageId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void RemoveIndexFromPageAsync(System.Guid pageId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.RemoveIndexFromPageOperationCompleted == null)) {
                this.RemoveIndexFromPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIndexFromPageOperationCompleted);
            }
            this.InvokeAsync("RemoveIndexFromPage", new object[] {
                        pageId,
                        sessionKey,
                        loginId}, this.RemoveIndexFromPageOperationCompleted, userState);
        }
        
        private void OnRemoveIndexFromPageOperationCompleted(object arg) {
            if ((this.RemoveIndexFromPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveIndexFromPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/RemoveIndexFromPageRange", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveIndexFromPageRange(System.Guid[] pageIds, string sessionKey, System.Guid loginId) {
            this.Invoke("RemoveIndexFromPageRange", new object[] {
                        pageIds,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void RemoveIndexFromPageRangeAsync(System.Guid[] pageIds, string sessionKey, System.Guid loginId) {
            this.RemoveIndexFromPageRangeAsync(pageIds, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void RemoveIndexFromPageRangeAsync(System.Guid[] pageIds, string sessionKey, System.Guid loginId, object userState) {
            if ((this.RemoveIndexFromPageRangeOperationCompleted == null)) {
                this.RemoveIndexFromPageRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIndexFromPageRangeOperationCompleted);
            }
            this.InvokeAsync("RemoveIndexFromPageRange", new object[] {
                        pageIds,
                        sessionKey,
                        loginId}, this.RemoveIndexFromPageRangeOperationCompleted, userState);
        }
        
        private void OnRemoveIndexFromPageRangeOperationCompleted(object arg) {
            if ((this.RemoveIndexFromPageRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveIndexFromPageRangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/SetIndexParent", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetIndexParent(System.Guid pageId, System.Guid parentPageId, string sessionKey, System.Guid loginId) {
            this.Invoke("SetIndexParent", new object[] {
                        pageId,
                        parentPageId,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void SetIndexParentAsync(System.Guid pageId, System.Guid parentPageId, string sessionKey, System.Guid loginId) {
            this.SetIndexParentAsync(pageId, parentPageId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void SetIndexParentAsync(System.Guid pageId, System.Guid parentPageId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.SetIndexParentOperationCompleted == null)) {
                this.SetIndexParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIndexParentOperationCompleted);
            }
            this.InvokeAsync("SetIndexParent", new object[] {
                        pageId,
                        parentPageId,
                        sessionKey,
                        loginId}, this.SetIndexParentOperationCompleted, userState);
        }
        
        private void OnSetIndexParentOperationCompleted(object arg) {
            if ((this.SetIndexParentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIndexParentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/SetIndexPosition", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetIndexPosition(System.Guid pageId, int position, string sessionKey, System.Guid loginId) {
            this.Invoke("SetIndexPosition", new object[] {
                        pageId,
                        position,
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void SetIndexPositionAsync(System.Guid pageId, int position, string sessionKey, System.Guid loginId) {
            this.SetIndexPositionAsync(pageId, position, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void SetIndexPositionAsync(System.Guid pageId, int position, string sessionKey, System.Guid loginId, object userState) {
            if ((this.SetIndexPositionOperationCompleted == null)) {
                this.SetIndexPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIndexPositionOperationCompleted);
            }
            this.InvokeAsync("SetIndexPosition", new object[] {
                        pageId,
                        position,
                        sessionKey,
                        loginId}, this.SetIndexPositionOperationCompleted, userState);
        }
        
        private void OnSetIndexPositionOperationCompleted(object arg) {
            if ((this.SetIndexPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIndexPositionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/GetIndexPosition", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetIndexPosition(System.Guid pageId, string sessionKey, System.Guid loginId) {
            object[] results = this.Invoke("GetIndexPosition", new object[] {
                        pageId,
                        sessionKey,
                        loginId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndexPositionAsync(System.Guid pageId, string sessionKey, System.Guid loginId) {
            this.GetIndexPositionAsync(pageId, sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void GetIndexPositionAsync(System.Guid pageId, string sessionKey, System.Guid loginId, object userState) {
            if ((this.GetIndexPositionOperationCompleted == null)) {
                this.GetIndexPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndexPositionOperationCompleted);
            }
            this.InvokeAsync("GetIndexPosition", new object[] {
                        pageId,
                        sessionKey,
                        loginId}, this.GetIndexPositionOperationCompleted, userState);
        }
        
        private void OnGetIndexPositionOperationCompleted(object arg) {
            if ((this.GetIndexPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndexPositionCompleted(this, new GetIndexPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://reddot.de/cms/webservices/navigation/1_1/ClearCache", RequestNamespace="http://reddot.de/cms/webservices/navigation/1_1", ResponseNamespace="http://reddot.de/cms/webservices/navigation/1_1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearCache(string sessionKey, System.Guid loginId) {
            this.Invoke("ClearCache", new object[] {
                        sessionKey,
                        loginId});
        }
        
        /// <remarks/>
        public void ClearCacheAsync(string sessionKey, System.Guid loginId) {
            this.ClearCacheAsync(sessionKey, loginId, null);
        }
        
        /// <remarks/>
        public void ClearCacheAsync(string sessionKey, System.Guid loginId, object userState) {
            if ((this.ClearCacheOperationCompleted == null)) {
                this.ClearCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearCacheOperationCompleted);
            }
            this.InvokeAsync("ClearCache", new object[] {
                        sessionKey,
                        loginId}, this.ClearCacheOperationCompleted, userState);
        }
        
        private void OnClearCacheOperationCompleted(object arg) {
            if ((this.ClearCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddIndexToPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddIndexToPageRangeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveIndexFromPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveIndexFromPageRangeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetIndexParentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetIndexPositionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetIndexPositionCompletedEventHandler(object sender, GetIndexPositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndexPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndexPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ClearCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591